This is a lessons learned from lifter development program, and people go how in the world do you have already lessons learned when you don’t have a program yet? Well the idea of writing lessons learned is not for you, not for your program, it’s for the next generation, the next guy after you. It starts to germinate a few ideas to care of (carry over?) a real program 
Power density and efficiency and all the good things you hear about Thorium about LFTR about these kinds of technologies, (for) the general public it’s more the inherent safety and then the economics. 
and the biggest thing with the economics is a lot of times people don’t do a good job, they get involved with the coolness of the technology, or the ultimate end goal of what it would be like a fusion. And the economics really drive things early on and what are you gonna do, what are you gonna do in a prototype, what do you need to proof first, those kinds of things. 
the first thing in lessons learned and surprising(ly?) its education. Any time you build a technology, and I think we know that, were here to do that, and were doing that in congress were doing that to the public, but in a project that will remain nameless that I’m working on now, that I’m chief engineer for, the first thing we have is that we have a book about three inches thick, that’s the 101 course that tells you everything about the history, why and how, you know what does the system work like. 
the critics said it couldn’t be done, because they know, its been about a 10 year program that they’re working on, almost 15, you gotta have that motivation to go beyond what people say can be done. I think the Thorium community sees that.
I threw in this one, the terabyte, because its amazing how small things get done in the electronics world. We take it for granted now, but if I said that you know, 10 years ago, people would say your crazy, it’ll never happen
In NASA before they went to the moon before they knew how they would go to the moon, there were all kinds of ideas, how do you do this, how do you solve that problem, how do you do it in less than ten years. And this engineer, John Houbolt is considered the guy who championed it. There was a lot of engineers who did a lot of work, a lot of data, that said Lunar orbit rendezvous, this LOR was the way to go. 
Now we all know, that’s the way it went, and it was successful, but he took a lot of hours for a number of years, they were literally throwing him out of headquarters saying ‘shut up! Its too dangerous, you are absolutely crazy’ and here is one of the quotes: “his figures lie, he doesn’t know what he’s talking about”
And we certainly have gotten that, and I’m sure a lot of people in the room have gotten those arrows, so a little bit of the education to keep people excited about it.
The next thing is motivation, the other thing that was common to almost all of the lessons learned is Sir Arthur Clark’s three laws, they apply somewhat to LFTR or to a Thorium. I don’t think it’s quite magical, Fusion is magical. When you make that happen, ok, when you grasp that, it would be magical. Thorium is actually, you know, a little bit more down to earth, and you know a hardcore big thick tyre, you know, kind of monster vehicle. 
You don’t necessarily need to have new physics, you know, to make it work, so some of these apply at least to the outside they apply, but to people who know, if you go to the liquid form, if you force yourself to make that technology commitment, that would be the key. 50 years from now people would be going ‘of course that’s the answer’, you don’t believe it now. 
All right, what you might need. Your gonna need a reactor ok, you need a power system. Some of the little things, especially on the program I’m working on right now, the lessons learned is you pay attention to ground support equipment. 
you wanna be able to take the fluid in and out, even if you thing the envisioned thing is a closed system. Like a refrigerator, nowadays we buy a refrigerator the whole things enclosed, encapsulated, once it’s built it’s done, you never mess with it ok. If it leaks, you throw it away, alright. 
We cant have that, the first time they built a refrigerator they didn’t think that way, that came after the prototype, that came after the development. You gotta be able to take that fluid in and out, you gotta be able to examine it, you gotta look for the contaminations that are gonna drive you crazy, and then you find out it’s the supplier, you know, he used a cleaner in the tank that was storing, and I’m using lessons leaned here. 
It entered into your material, and like I said, you gotta be able to find that out, find it out quickly, or your program looks like ‘oh, you must have a technology problem’ when it’s a vendor or supply problem
safety critical software. We don’t have as much of a problem with that. But a reactor normally has safety critical software, so do our military planes today, a lot of them are fly by wire, its extremely expensive to build, and really expensive to test, ok, because you have to absolutely be sure that it works. 
If you can stay away from that, again, in the present lesson learned, you know, they don’t have any safety critical software, ok, on the weapons system Im working on, and it’s completely automated. So once you say engage, it can do whatever it wants to. That’s amazing and still keeps the people on board safe as well as what you’re targeting. 
And then a corollary is, actually the next slide will cover this too, is the health and status. In the long run this thorium and a reactor like this LFTR type thing should have a lot of diagnostics, but in order to prove that its safe, in order to prove that all the claims were claiming today, your gonna have to have a lot of data. Where does that data come from? From your diagnostics hardware.
What I would envision in lessons learned on something like this is that you have not only maybe two operators in a, lets say this is a field mobile unit, you know military type, you expect two operators there, they have certain things that they are looking at, what you do is you have another set behind them, during your development phase, which all your physicists and engineers are behind them, they have ten times the amount of diagnostics. So when an operator says ‘I see this and I turn this knob’ you actually see what the whole system is doing, you can anylise that. 
I think your gonna need that early on. And this would be the first thing that you do, mechanical working model, (points to ‘Full-scale thermal/mechanical working model on ppt) something that’s not nuclear that can be heated through an electrical and or gas more than likely. Then compare that to CFD modelling. I think the neutronics codes, and correct me if I’m wrong, are pretty well established and I think that that is not gonna be the tall pole in the tent, it may actually be going from this model and getting good CFD
I do a lot of work with fluids and high temperatures and people are not as able to model that as easily. And then the third item would be a diagnostic test prototype which I was talking about. This is where you have a reactor, this is where you have a lot of diagnostics and your looking at what the operators are doing and reacting. 
once you’ve done those three that’s your initial run up, you’d build a prototype and give it to a customer like the military. It’s much harder on a commercial to go kick the tyres if you will, take it out to the field and tell you all the problems and see if they’d like to buy it, ok.
But then you’d have, if they find a problem, this stuff right here, that immediately goes back and reiterates. 
do I have a question? go ahead.
What does CFD mean?
Computational fluid dynamics, its your computer models, a lot of people call it (DSIL) or that’s utilised often in…. (Video edit breaks train of speech)
Managing risk. The pathfinder, ok, starting on things early. One of the things they did, in the program that Im working on, they were gonna put a weapon system on a 747, they flew around the world six times in six weeks with diagnostics on a regular 747. 
you may wanna start thinking about what kinds of tests you need to do. If your gonna go to a site and build this thing, you may want background data, ok, on what radiation there is in the air or on the ground and things like that. Because you need that background later, and if you don’t have a year worth of data, then it gets questionable of, did you add something or didn’t you, or is it a phenomenon with the weather, or something else going on
finish your risk data assessment before you make your decision. In too many programs of lessons learned is, they almost were done with the data, you know, on a risk, you know, path that they were taking, but they went ahead and made a decision because they had to programmatically do that, and what they found out was of course, you know, there was some problem that cropped up
mobility means vibration issues, again very near and dear to my heart. Everything from basic connectors to diagnostic wiring. A lot of video, you know people forget that and go ‘well how am I gonna video?’ make sure you have ports in your diagnostics, so you can see this flow of this reactor, and the power system and the turbine, you know (vibrate) the cycle.
If you use COTS ok, commercial off the shelf items, they’re not gonna be exactly what you want, ok, ant they’re not gonna last as long as you want. So you design something, you pick something off, two years later, your operating the thing finally, you say ‘ah it doesn’t work, or it broke, I wanna buy a new one’ and the vendor says, ‘well I have this new updated one that’s much smaller,’ and you go, ‘it doesn’t fit, and it doesn’t go with the rest of my analysis that I had done, even if its smaller lighter, faster cheaper’, ok it sometimes can cause a big problem. COTS is another lessons learned, as you go through that sometimes its not the best way to go. Be judicious in that. 
Independent review team, an IRT. Having one early, start up with you, and stay the life of a program, is a huge savings in the long run. Kinda like well, we don’t need an independent review, we haven’t done anything yet, but what they will do is, when you do run into a problem, or a path you have to make a choice at, you didn’t make your milestone you promised everybody. They will not only advocate for you, but they have all the background knowledge, so you bring them back in for a couple of days, that’s been invaluable to most of these large programs. 
We should be looking for that, is gonna be hard, with the thorium there’s not a lot of folks there, but you can pick and choose to experience the chemist, and physicist and people who had been working, maybe in this room, who are a little senior will be on that. 
Hire believers not mercenaries. In a technology program, your going to run into programs, you gotta have somebody who’s really gonna stay up all night and figure out how to make that work. 
Never let a know defect be deferred, it always bites you if you don’t fix it. So fix it do the right engineering. ‘don’t say well it worked last time’, like the shuttle, it worked fifty times, you know, but you know you have a known defect. That’s a classic mistake
Never tolerate an unexplained mystery in any test, data, it always shows up.
And the last one, actually was written in some of the, what do you call it, lessons learned; pray a lot, and it is a lot of hard work but it’s a lot of fun, on a program. 
but your gonna have to get the team together, and motivate them, educate them and then tackle the problems as they see fit. 
hope that was good enough on the big overview.
